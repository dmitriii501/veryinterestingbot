from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import json
from datetime import datetime, timedelta
import dashscope
from bot.config import app_settings

router = Router(name="ai_db_query")


async def get_table_schema():
    return """
    Table: employees
    Columns: id, full_name, department, position, email, birthday, projects, skills, telegram_id
    
    Table: events
    Columns: id, title, description, date, time, location, organizer_id, participants, type
    
    Table: tasks
    Columns: id, title, description, assignee_id, due_date, status, priority, project
    """


async def generate_sql_query(user_query: str, schema: str) -> str:
    if not app_settings.DASHSCOPE_API_KEY:
        return None

    prompt = f"""
    Given the following database schema:
    {schema}
    
    Generate a SQL query to answer this question: "{user_query}"
    Return ONLY the SQL query, nothing else.
    """

    try:
        response = dashscope.Generation.call(
            model='qwen-max',
            prompt=prompt,
            api_key=app_settings.DASHSCOPE_API_KEY,
            result_format='message',
            max_tokens=500,
            temperature=0.1
        )
        
        if response.status_code == 200:
            return response.output.choices[0].message.content.strip()
        return None
    except Exception as e:
        print(f"Error generating SQL query: {e}")
        return None


@router.message(Command("query"))
async def handle_query_command(message: Message):
    await message.answer(
        "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–ª–∏ –∑–∞–¥–∞—á–∞—Ö, "
        "–∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?\n"
        "- –ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "- –°–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º?"
    )


@router.message(F.text)
async def process_query(message: Message):
    query = message.text
    bot = message.bot

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schema = await get_table_schema()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é AI
        sql_query = await generate_sql_query(query, schema)
        
        if not sql_query:
            await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase
        result = await bot.supabase_client.rpc(
            'execute_query',
            {'query': sql_query}
        ).execute()

        if not result.data:
            await message.answer("ü§î –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = ["üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"]
        
        if isinstance(result.data, list):
            for item in result.data[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                response.append("\n" + json.dumps(item, ensure_ascii=False, indent=2))
        else:
            response.append("\n" + json.dumps(result.data, ensure_ascii=False, indent=2))

        await message.answer("\n".join(response))

    except Exception as e:
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Query error: {e}") 