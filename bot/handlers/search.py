from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from bot.models import Employee, Event, Task
from datetime import datetime

router = Router(name="search")


@router.message(Command("search"))
async def search_command(message: Message):
    await message.answer(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?\n"
        "- –ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?\n"
        "- –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"
    )


@router.message(F.text)
async def process_search_query(message: Message):
    query = message.text.lower()
    bot = message.bot
    
    try:
        # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = await bot.supabase_client.table("employees").select("*").execute()
        
        # –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        events = await bot.supabase_client.table("events").select("*").execute()
        
        # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á
        tasks = await bot.supabase_client.table("tasks").select("*").execute()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –º–æ–¥–µ–ª–∏
        employees_data = [Employee(**emp) for emp in employees.data]
        events_data = [Event(**event) for event in events.data]
        tasks_data = [Task(**task) for task in tasks.data]

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
        found_employees = [
            emp for emp in employees_data
            if query in emp.full_name.lower() or
            query in emp.department.lower() or
            any(query in proj.lower() for proj in emp.projects)
        ]

        found_events = [
            event for event in events_data
            if query in event.title.lower() or
            query in event.description.lower()
        ]

        found_tasks = [
            task for task in tasks_data
            if query in task.title.lower() or
            query in task.description.lower()
        ]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = []
        
        if found_employees:
            response.append("üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:")
            for emp in found_employees[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                response.append(f"- {emp.full_name} ({emp.department})")
        
        if found_events:
            response.append("\nüìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            for event in found_events[:5]:
                response.append(f"- {event.title} ({event.date})")
        
        if found_tasks:
            response.append("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in found_tasks[:5]:
                response.append(f"- {task.title} ({task.status})")

        if not response:
            await message.answer("ü§î –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await message.answer("\n".join(response))

    except Exception as e:
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Search error: {e}")
