# bot/handlers/employees_handler.py
import logging
from aiogram import Router, types, Bot
from aiogram.types import Message
from aiogram.filters import Command
from supabase import Client

from  bot.utils.database import fetch_data_from_table

router = Router(name="employees_commands")
logger = logging.getLogger(__name__)

@router.message(Command("get_employees"))
async def get_employees_command(message: Message, bot: Bot):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_employees –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    if not hasattr(bot, 'supabase_client') or not bot.supabase_client:
        logger.error("–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ –±–æ—Ç–∞.")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    supabase: Client = bot.supabase_client

    table_name = 'employees'

    columns_to_select = "name, hire_date, department, phone_number, job_title"

    logger.debug(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}', –∫–æ–ª–æ–Ω–∫–∏: '{columns_to_select}'")
    employees_list, error = await fetch_data_from_table(supabase, table_name, columns=columns_to_select)

    if error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {error}")
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {error}")
        return

    if not employees_list:
        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await message.answer(f"–í —Ç–∞–±–ª–∏—Ü–µ '{table_name}' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(employees_list)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")

    response_text = f"üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'):\n\n"
    for i, employee in enumerate(employees_list):
        name = employee.get('name', 'N/A')
        hire_date = employee.get('hire_date', 'N/A')
        department = employee.get('department', 'N/A')
        phone = employee.get('phone_number', 'N/A')
        job_title = employee.get('job_title', 'N/A')

        entry = f"{i + 1}. üßë‚Äçüíº –§–ò–û: {name}\n" \
                f"   –û—Ç–¥–µ–ª: {department}\n" \
                f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n" \
                f"   üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {hire_date}\n" \
                f"    –î–æ–ª–∂–Ω–æ—Å—Ç—å: {job_title}\n"
        response_text += entry + "\n"

        if len(response_text) > 3800:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            response_text += "... (–¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å)"
            logger.warning("–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º.")
            break

    await  message.answer(response_text)