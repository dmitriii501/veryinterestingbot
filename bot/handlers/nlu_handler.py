from aiogram import Router, Bot, F
from aiogram import types
from aiogram.filters import Command
import json
import re
import logging
from typing import Optional, List, Dict, Any
from datetime import datetime

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ process_user_query –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ai_module/nlu.py
from ai_module.nlu import process_user_query  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_user_query
#from bot.keyboards.inline import *
#from bot.utils.utils import *

router = Router(name="nlu_handler")
#dp = Dispatcher(bot) #–£–¥–∞–ª—è–µ–º Bot –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
#–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç bot —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å.
#–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å.

def escape_markdown_v2(text: str) -> str:
    """Escape MarkdownV2 special characters."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

def format_employee_info(employee: Dict[str, Any], info_type: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    if info_type:
        if info_type == "education":
            return f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}:\n{employee.get('education', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        elif info_type == "hire_date":
            hire_date = employee.get('hire_date')
            if hire_date:
                date_obj = datetime.strptime(hire_date, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                return f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É {employee['name']}:\n{formatted_date}"
            return f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É {employee['name']}: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        elif info_type == "job_title":
            return f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}:\n{employee.get('job_title', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
        elif info_type == "phone_number":
            phone = str(employee.get('phone_number', ''))
            if phone:
                formatted_phone = f"+{phone[:1]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:]}"
                return f"üì± –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}:\n{formatted_phone}"
            return f"üì± –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}: –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –ï—Å–ª–∏ —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info = [f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ {employee['name']}:"]
    if employee.get('job_title'):
        info.append(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee['job_title']}")
    if employee.get('department'):
        info.append(f"üè¢ –û—Ç–¥–µ–ª: {employee['department']}")
    if employee.get('hire_date'):
        date_obj = datetime.strptime(employee['hire_date'], "%Y-%m-%d")
        info.append(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {date_obj.strftime('%d.%m.%Y')}")
    if employee.get('education'):
        info.append(f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {employee['education']}")
    if employee.get('phone_number'):
        phone = str(employee['phone_number'])
        formatted_phone = f"+{phone[:1]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:]}"
        info.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}")
    
    return "\n".join(info)

async def find_employees(bot: Bot, query: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ò—â–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    """
    try:
        if not bot.supabase_client:
            logging.error("Supabase client not configured")
            return []
            
        supabase_query = bot.supabase_client.table('employees').select('*')
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        if query.get('entities', {}).get('employee_name'):
            supabase_query = supabase_query.ilike('name', f"%{query['entities']['employee_name']}%")
            
        # –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        if query.get('entities', {}).get('position'):
            supabase_query = supabase_query.ilike('job_title', f"%{query['entities']['position']}%")
            
        # –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É
        if query.get('entities', {}).get('department'):
            supabase_query = supabase_query.ilike('department', f"%{query['entities']['department']}%")
            
        response = supabase_query.execute()
        return response.data if response.data else []
        
    except Exception as e:
        logging.error(f"Error querying Supabase for employees: {e}")
        return []

@router.message(Command("nlu"))
async def nlu_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nlu –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.
    """
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /nlu\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "üéì /nlu –∫–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É –í–∏–∫—Ç–æ—Ä–∞ –ò–≤–∞–Ω–æ–≤–∏—á–∞\n"
            "üíº /nlu –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —é—Ä–∏—Å—Ç–æ–º\n"
            "üìÖ /nlu –∫–æ–≥–¥–∞ –ø—Ä–∏–Ω—è–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –ê–Ω–Ω—É\n"
            "‚ÑπÔ∏è /nlu –¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–µ—Ç—Ä–µ –í–∞—Å–∏–ª—å–µ–≤–∏—á–µ"
        )
        return

    user_query = command_parts[1]
    result = await process_user_query(user_query)
    
    if result:
        try:
            employees = await find_employees(message.bot, result)
            
            if not employees:
                await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                return
                
            if result['intent'] in ['find_employee', 'find_by_position', 'find_by_department']:
                info_type = result.get('entities', {}).get('info_type')
                
                if len(employees) == 1:
                    # –û–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    response = format_employee_info(employees[0], info_type)
                    await message.answer(response)
                else:
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                    if result.get('intent') == 'find_by_position':
                        position = result.get('entities', {}).get('position', '—É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
                        response = [f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {position}:"]
                    elif result.get('intent') == 'find_by_department':
                        department = result.get('entities', {}).get('department', '—É–∫–∞–∑–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ')
                        response = [f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª–µ {department}:"]
                    else:
                        response = ["üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:"]
                    
                    for emp in employees:
                        emp_info = f"‚Ä¢ {emp['name']}"
                        if emp.get('job_title'):
                            emp_info += f" üíº {emp['job_title']}"
                        if emp.get('department'):
                            emp_info += f" üè¢ {emp['department']}"
                        response.append(emp_info)
                    
                    await message.answer("\n".join(response))
                else:
                    await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞.")
                
        except Exception as e:
            logging.error(f"Error processing response: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ."
        )