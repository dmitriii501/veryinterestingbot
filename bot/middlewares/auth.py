from cgitb import handler
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.loggers import event
from aiogram.types import Message, CallbackQuery, User, TelegramObject

class AuthMiddleware(BaseMiddleware):
    def __init__(self, allowed_ids: set[int]):
        super().__init__()
        self.allowed_ids = allowed_ids
        if not self.allowed_ids:
            print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: AuthMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º allowed_ids.")

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        user: User | None = data.get('event_from_user')

        if user:
            if user.id not in self.allowed_ids:
                unauthorized_message = "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."

                if isinstance(event, Message):
                    try:
                        await event.answer(unauthorized_message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

                elif isinstance(event, CallbackQuery):
                    try:
                        await event.answer(unauthorized_message, show_alert=True)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                return

        else:
            print("AuthMiddleware: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return

        return await handler(event,data)