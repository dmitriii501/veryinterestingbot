import logging
from cgitb import handler
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.loggers import event
from aiogram.types import Message, CallbackQuery, User, TelegramObject

class AuthMiddleware(BaseMiddleware):
    def __init__(self, allowed_ids: set[int]):
        super().__init__()
        if isinstance(allowed_ids, str):
            try:
                self.allowed_ids = {int(uid.strip()) for uid in allowed_ids.split(',') if uid.strip().isdigit()}
            except ValueError:
                logging.warning(f"–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç allowed_ids: {allowed_ids}")
                self.allowed_ids = set()
        else:
            self.allowed_ids = set(allowed_ids)


        if not self.allowed_ids:
            logging.warning("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: AuthMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º allowed_ids.")

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        user: User | None = data.get('event_from_user')

        if user.id not in self.allowed_ids:
            unauthorized_message = "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")

            if isinstance(event, Message):
                try:
                    await event.reply(unauthorized_message)
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

                    try:
                        await event.answer(unauthorized_message)
                    except Exception as e2:
                        logging.warning(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")

            elif isinstance(event, CallbackQuery):
                try:

                    await event.answer(unauthorized_message, show_alert=True)
                    if event.message:
                        await event.message.reply(unauthorized_message)

                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

            return None

        return await handler(event,data)